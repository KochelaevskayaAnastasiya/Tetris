@page "{id}/{state}"
@model tetris.Pages.GameModel
@{
    ViewData["Title"] = "Игра";
}
<body class="body_game">
    <div class="field_of_play">
        <div class="button_two">
                <button id="pause_button" onclick="Pause();" type="button">Пауза</button>
                <button type="submit" onclick="Again(); ">Заново</button>
        </div>
        <div class="gg2">
        <div class="canvas_field">
            <canvas id="game" class="game"></canvas>
        </div>
        <div class="right_field">
            <div class="element"><canvas id="nextFigure" class="nextFigure"></canvas></div>
            <div class="element">
                    <label id="timer2">Время </label><label id="timer">00:00</label>
                </div>
            <div class="element"><label id="level">Уровень 1</label></div>
            <div class="element">
                                <label id="point2">Очки: </label>
                    <label id="point">0</label>
                </div>
           <div class="element">
                    <button type="button" onclick="LevelUp();">Увеличить уровень</button>
                    <form method="POST" onsubmit="DoSubmit();" name="recordGame">
                        <input type="hidden" id="records" name="records">
                        <button class="button" id="addRecords" type="submit">Сохранить записи</button>
                        <label id="records"></label>
                    </form>

                </div>
        </div>
        </div>
    </div>
    <label id="12"></label>

    <script>
        


        let frames = 35;

        let mode = @Model.point_mode;

        let records_list = [];
        document.getElementById('records').innerHTML = 'Результаты текущей сессии:';

        
           

        if (mode == 0) {
            document.getElementById('point2').style.visibility = "hidden";
            document.getElementById('point').style.visibility = "hidden";
            document.getElementById('timer2').style.visibility = "hidden";
            document.getElementById('timer').style.visibility = "hidden";
        }
        else {
            if (mode == 1) {
                document.getElementById('point2').style.visibility = "hidden";
                document.getElementById('point').style.visibility = "hidden";
            }
            else {
                document.getElementById('timer2').style.visibility = "hidden";
                document.getElementById('timer').style.visibility = "hidden";
            }
        }


        let count_point = 0;
        let point_for_line = @Model.difficulty_level.Points_row;
        let count_pointer = document.getElementById('point');
        let point_next_level = @Model.difficulty_level.points_next_level;
        let point_next_level_zero = @Model.difficulty_level.points_next_level;

        let level_pointer = document.getElementById('level');
        let lev = 1;

        let pause_button = document.getElementById('pause_button');

        

        let speed_level = @Model.difficulty_level.speed;
        frames-=speed_level;

        function LevelUp(){

            if (frames > 1) {
                    lev++;
                    level_pointer.textContent = `Уровень ${lev.toString()}`;
                    speed_level++;
                    frames -= 1;
                
            } else {
                level_pointer.textContent = `Уровень максимальный`;
            }
        }

        //------
        let timer = document.getElementById('timer');
        let seconds = 0;
        let minutes = 0;
        let interval;

        let start_time = true;

        function updateTime() {
            if (start_time) {
            seconds++;
            if (seconds === 60) {
                minutes++;
                seconds = 0;
            }
            if (minutes === 60) {
                hours++;
                minutes = 0;
            }
            timer.textContent = ` ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        }
        interval = setInterval(updateTime, 1000);
            //---------
        let isPause = false;
        function Pause() {
            if (isPause == false)
            { 
                isPause = true; 
                clearInterval(interval); 
                showPause();
                pause_button.textContent = `Продолжить`;
            }
            else 
            { 
                isPause = false; 
                interval = setInterval(updateTime, 1000); 
                rAF = requestAnimationFrame(loop); 
                pause_button.textContent = `Пауза`;

            }

        }

        
            //---------

        const canvas = document.getElementById('game');
        const context = canvas.getContext('2d');
        const grid = 32;
        const tetrominoSequence = [];
        //-----

        

        const wi = @Model.difficulty_level.Glass.Wigth();
        const he = @Model.difficulty_level.Glass.Height();
        canvas.width = wi * grid;
        canvas.height = he * grid;
        //-----
        

        const next_figure = document.getElementById('nextFigure');
        const context_next_figure = next_figure.getContext('2d');
        next_figure.width = 4 * grid;
        next_figure.height = 4 * grid;



        // https://tetris.fandom.com/wiki/Tetris_Guideline

        // get a random integer between the range of [min,max]
        // see https://stackoverflow.com/a/1527820/2124254
        function getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);

            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        function getFigure(str){
            let fig = new Array();
            const figure_with_col = str.split(';');
            let col = Number(figure_with_col[1]);
            let row = figure_with_col[0].length / col;
            let fig_str = figure_with_col[0];

            for (let r = 0; r < row; r++) {
                let fig_dop = new Array();
                for (let c = 0; c < col; c++){
                    fig_dop[c] = fig_str[r*col+c];
                }
                fig[r] = fig_dop;
            }
            return fig;
        }

        const l2 = '@String.Join(",",Model.figures_mas)';
        const figures = l2.split(',');

        const l3 = '@String.Join(",",Model.figures_mas_with_col)';
        const figures_with_col = l3.split(',');

        

        let figures_mas = new Array();

        for(let k=0;k<figures_with_col.length;k++){
            figures_mas[k] = getFigure(figures_with_col[k]);
        }



        // generate a new tetromino sequence
        // see https://tetris.fandom.com/wiki/Random_Generator
        function generateSequence() {
            //const sequence = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];
            let sequence2 = new Array();
            for (let i = 0; i < figures_mas.length; i++) {
                sequence2[i] = i+1;
            }

            while (sequence2.length) {
                const rand = getRandomInt(0, sequence2.length-1);
                const num = sequence2.splice(rand, 1)[0];
                tetrominoSequence.push(num);
            }
        }

        // get the next tetromino in the sequence
        function getNextTetromino() {
            if (tetrominoSequence.length === 0) {
                generateSequence();
            }

            const name = tetrominoSequence.pop();
            const matrix = figures_mas[name-1];

            // I and O start centered, all others start in left-middle
            const col = playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);

            // I starts on row 21 (-1), all others start on row 22 (-2)
            const row = name === 'I' ? -1 : -2;

            const colorr = getRandomInt(0, 9) + 1;


            return {
                name: name,      // name of the piece (L, O, etc.)
                matrix: matrix,  // the current rotation matrix
                row: row,        // current row (starts offscreen)
                col: col,         // current col
                colorr:colorr
            };
        }

        // rotate an NxN matrix 90deg
        // see https://codereview.stackexchange.com/a/186834
        function rotate(matrix) {
            const N = matrix.length - 1;
            const result = matrix.map((row, i) =>
                row.map((val, j) => matrix[N - j][i])
            );

            return result;
        }

        // check to see if the new matrix/row/col is valid
        function isValidMove(matrix, cellRow, cellCol) {
            for (let row = 0; row < matrix.length; row++) {
                for (let col = 0; col < matrix[row].length; col++) {
                    if (matrix[row][col]=='1' && (
                        // outside the game bounds
                        cellCol + col < 0 ||
                        cellCol + col >= playfield[0].length ||
                        cellRow + row >= playfield.length ||
                        // collides with another piece
                        playfield[cellRow + row][cellCol + col])
                    ) {
                        return false;
                    }
                }
            }

            return true;
        }
            function showDetail(kurz) {
                let sParam = kurz.toString();
                Result_class.RegisterUser(sParam, onSucess, onError);

                function onSucess(result) {
                    alert(result);
                }

                function onError(result) {
                    alert('Cannot process your request at the moment, please try later.');
                }
            }
            // place the tetromino on the playfield
        function placeTetromino() {
            for (let row = 0; row < tetromino.matrix.length; row++) {
                for (let col = 0; col < tetromino.matrix[row].length; col++) {
                    if (tetromino.matrix[row][col]=='1') {

                        // game over if piece has any part offscreen
                        if (tetromino.row + row < 0) {
                            start_time = false;
                            if(mode != 0){
                                    if (mode == 1) {
                                        records_list[records_list.length] = timer.textContent;

                                    }
                                    else {
                                        records_list[records_list.length] = count_point;
                                    }
                            }
                            document.getElementById('records').textContent += recordsToString();
                            return showGameOver();
                        }

                        playfield[tetromino.row + row][tetromino.col + col] = tetromino.colorr;
                    }
                }
            }


            // check for line clears starting from the bottom and working our way up
            for (let row = playfield.length - 1; row >= 0;) {
                if (playfield[row].every(cell => !!cell)) {
                    count_point+=point_for_line;
                    if(frames>1){
                    if (count_point>=point_next_level){
                        point_next_level += point_next_level_zero;
                        lev++;
                        level_pointer.textContent = `Уровень ${lev.toString()}`;
                        speed_level++;
                        frames-=1;
                    }
                    } else {
                        level_pointer.textContent = `Уровень максимальный`;
                    }
                    count_pointer.textContent = `${count_point.toString()}`;

                    // drop every row above this one
                    for (let r = row; r >= 0; r--) {
                        for (let c = 0; c < playfield[r].length; c++) {
                            playfield[r][c] = playfield[r - 1][c];
                        }
                    }
                }
                else {
                    row--;
                }
            }

            tetromino = next_tetromino;
        }

        // show the game over screen
        function showGameOver() {
            cancelAnimationFrame(rAF);
            gameOver = true;

            context.fillStyle = 'black';
            context.globalAlpha = 0.75;
            context.fillRect(0, canvas.height / 2 - 30, canvas.width, 60);

            context.globalAlpha = 1;
            context.fillStyle = 'white';
            context.font = '36px monospace';
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillText('GAME OVER!', canvas.width / 2, canvas.height / 2);
        }

        // show the game over screen
        function showPause() {
            cancelAnimationFrame(rAF);

            context.fillStyle = 'black';
            context.globalAlpha = 0.75;
            context.fillRect(0, canvas.height / 2 - 30, canvas.width, 60);

            context.globalAlpha = 1;
            context.fillStyle = 'white';
            context.font = '36px monospace';
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillText('Пауза', canvas.width / 2, canvas.height / 2);
        }

        function recordsToString() {
            let str = "\n";
            for (let col = 0; col < records_list.length; col++) {
                str += records_list[col];
                if (col != records_list.length - 1) { str += "\n"; }
            }
            return str;
        }
        function DoSubmit() {
            document.recordGame.records.value = recordsToString();
            return true;
        }
        

        // keep track of what is in every cell of the game using a 2d array
        // tetris playfield is 10x20, with a few rows offscreen
        const playfield = [];

        // populate the empty state
        for (let row = -2; row < he; row++) {
            playfield[row] = [];

            for (let col = 0; col < wi; col++) {
                playfield[row][col] = 0;
            }
        }

        
        
        const colors2 = ['cyan', 'yellow', 'purple', 'green', 'midnightblue',
        'red', 'blue', 'orange', 'indigo', 'darkslategray'
        ];
        

        let next_tetromino = getNextTetromino();

        let count = 0;
        let tetromino = next_tetromino;
        next_tetromino = getNextTetromino();
        upgate_next_figure(next_tetromino);
        let rAF = null;  // keep track of the animation frame so we can cancel it
        let gameOver = false;

        function Again() {
            lev = 1;
            level_pointer.textContent = `Уровень ${lev.toString()}`;
            speed_level = @Model.difficulty_level.speed;
            frames = 35 - speed_level;
            gameOver = false;
            seconds = 0;
            minutes = 0;
            count_point = 0;

            document.getElementById('records').textContent = recordsToString();


            for (let row = -2; row < he; row++) {
                playfield[row] = [];

                for (let col = 0; col < wi; col++) {
                    playfield[row][col] = 0;
                }
            }
            next_tetromino = getNextTetromino();
            tetromino = next_tetromino;
            next_tetromino = getNextTetromino();
            upgate_next_figure(next_tetromino);
            rAF = requestAnimationFrame(loop);
        }

        
        function upgate_next_figure(tetromino) {
            context_next_figure.clearRect(0, 0, next_figure.width, next_figure.height);
            
            /*добавленый*/
            context_next_figure.fillStyle = 'black';
            for (let row = 0; row < 4; row++) {
                context_next_figure.fillRect(row * grid - 1, 0, 0.5, next_figure.height);
            }
            for (let col = 0; col < 4; col++) {
                context_next_figure.fillRect(0, col * grid - 1, next_figure.width, 0.5);
            }
             

            for (let row = 0; row < tetromino.matrix.length; row++) {
                for (let col = 0; col < tetromino.matrix[row].length; col++) {
                    if (tetromino.matrix[row][col] == '1') {
                        const name = tetromino.name;
                        context_next_figure.fillStyle = colors2[tetromino.colorr-1];

                        // drawing 1 px smaller than the grid creates a grid effect
                        context_next_figure.fillRect(col * grid, row * grid, grid - 1, grid - 1);
                    
                    }
                }
            }
        }
        
        

        // game loop
        function loop() {
            rAF = requestAnimationFrame(loop);
            if (isPause == false){
            context.clearRect(0, 0, canvas.width, canvas.height);


             /*добавленый*/
            context.fillStyle = 'black';
            for (let row = 0; row < wi; row++) {
                context.fillRect(row * grid-1, 0, 0.5, canvas.height);
            }
            for (let col = 0; col < he; col++) {
                context.fillRect(0, col * grid - 1, canvas.width, 0.5);
            }
            /*добавленый*/


            // draw the playfield
            for (let row = 0; row < he; row++) {
                for (let col = 0; col < wi; col++) {
                    if (playfield[row][col]!='0') {
                        const name = playfield[row][col];
                            context.fillStyle = colors2[name-1];

                        // drawing 1 px smaller than the grid creates a grid effect
                        context.fillRect(col * grid, row * grid, grid - 1, grid - 1);
                    }
                }
            }

            // draw the active tetromino
            if (tetromino) {

                // tetromino falls every 35 frames
                    if (++count > frames) {
                    tetromino.row++;
                    count = 0;

                    // place piece if it runs into anything
                    if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {
                        tetromino.row--;
                        placeTetromino();
                        next_tetromino = getNextTetromino();
                        upgate_next_figure(next_tetromino);
                    }
                }

                    context.fillStyle = colors2[tetromino.colorr-1];


                for (let row = 0; row < tetromino.matrix.length; row++) {
                    for (let col = 0; col < tetromino.matrix[row].length; col++) {
                        if (tetromino.matrix[row][col]=='1') {
                            // drawing 1 px smaller than the grid creates a grid effect
                            context.fillRect((tetromino.col + col) * grid, (tetromino.row + row) * grid, grid - 1, grid - 1);
                        }
                    }
                }
            }
            }
        }

        // listen to keyboard events to move the active tetromino
        document.addEventListener('keydown', function (e) {
            if (gameOver) return;

            // left and right arrow keys (move)
            if (e.which === 37 || e.which === 39) {
                const col = e.which === 37
                    ? tetromino.col - 1
                    : tetromino.col + 1;

                if (isValidMove(tetromino.matrix, tetromino.row, col)) {
                    tetromino.col = col;
                }
            }

            // up arrow key (rotate)
            if (e.which === 38) {
                const matrix = rotate(tetromino.matrix);
                if (isValidMove(matrix, tetromino.row, tetromino.col)) {
                    tetromino.matrix = matrix;
                }
            }

            // down arrow key (drop)
            if (e.which === 40) {
                const row = tetromino.row + 1;

                if (!isValidMove(tetromino.matrix, row, tetromino.col)) {
                    tetromino.row = row - 1;

                    placeTetromino();
                    next_tetromino = getNextTetromino();
                    upgate_next_figure(next_tetromino);
                    return;
                }

                tetromino.row = row;
            }

            // down arrow key (drop)
            if (e.keyCode === 32) {
                let row = tetromino.row + 1;
                while (isValidMove(tetromino.matrix, row, tetromino.col)) {
                    row = row + 1;
                }
                tetromino.row = row - 1;

                    placeTetromino();
                    next_tetromino = getNextTetromino();
                    upgate_next_figure(next_tetromino);
                    return;
            }
        });

        // start the game
        rAF = requestAnimationFrame(loop);

            
    </script>
</body>
